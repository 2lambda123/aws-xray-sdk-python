from .segment import Segment
from ..exceptions.exceptions import MimicSegmentInvalidException


class MimicSegment(Segment):
    """
    The MimicSegment is an entity that mimics a segment for the use of the serverless context.
    When the MimicSegment is generated, its parent segment is assigned to be the FacadeSegment
    generated by the Lambda Environment. Upon serialization and transmission of the MimicSegment,
    it is converted to a locally-namespaced, subsegment. This is only done during serialization.
    All Segment-related method calls done on this object are valid.

    Subsegments are automatically created with the namespace "local" to prevent it from appearing
    as a node on the service graph. For all purposes, the MimicSegment can be interacted as if it's
    a real segment, meaning that all methods that exist only in a Segment but not a subsegment
    is available to be used.
    """

    def __init__(self, facade_segment=None, original_segment=None):
        if not original_segment or not facade_segment:
            raise MimicSegmentInvalidException("Invalid MimicSegment construction. "
                                               "Please put in the original segment and the facade segment.")
        super(MimicSegment, self).__init__(name=original_segment.name, entityid=original_segment.id,
                                           traceid=facade_segment.trace_id, parent_id=facade_segment.id,
                                           sampled=facade_segment.sampled)

    def __getstate__(self):
        """
        Used during serialization. We mark the subsegment properties to let the dataplane know
        that we want the mimic segment to be represented as a subsegment.
        """
        properties = super(MimicSegment, self).__getstate__()
        properties['type'] = 'subsegment'
        properties['namespace'] = 'local'
        return properties
